{"version":3,"sources":["exercices/observer/index.ts"],"names":[],"mappings":"AASA,IAAA,YAAA;AAAA;AAAA,YAAA;AAGE,WAAA,YAAA,CAAY,KAAZ,EAAyB;AAAzB,QAAA,KAAA,GAAA,IAAA;;AAFA,SAAA,SAAA,GAAwB,EAAxB;AAGE,QAAM,EAAE,GAAqB,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CAA7B;AACA,IAAA,EAAE,CAAC,gBAAH,CAAoB,OAApB,EAA6B,YAAA;AAC3B,MAAA,KAAI,CAAC,MAAL,CAAY,EAAE,CAAC,KAAf;AACD,KAFD;AAGD;;AAED,EAAA,YAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAW,QAAX,EAA6B;AAC3B,SAAK,SAAL,CAAe,IAAf,CAAoB,QAApB;AACD,GAFD;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAa,QAAb,EAA+B;AAC7B,QAAM,KAAK,GAAG,KAAK,SAAL,CAAe,SAAf,CAAyB,UAAA,GAAA,EAAG;AACxC,aAAO,GAAG,KAAK,QAAf;AACD,KAFa,CAAd;AAIA,SAAK,SAAL,CAAe,MAAf,CAAsB,KAAtB,EAA6B,CAA7B;AACD,GAND;;AAQA,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAQ,IAAR,EAAiB;AACf,SAAK,SAAL,CAAe,OAAf,CAAuB,UAAA,QAAA,EAAQ;AAAI,aAAA,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CAAA;AAAqB,KAAxD;AACD,GAFD;;AAGF,SAAA,YAAA;AAzBA,CAAA,EAAA;;AA2BA,IAAA,YAAA;AAAA;AAAA,YAAA;AAGE,WAAA,YAAA,CAAa,KAAb,EAA0B;AACxB,SAAK,EAAL,GAAU,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CAAV;AACD;;AACD,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAgB;AACd,SAAK,EAAL,CAAQ,SAAR,GAAoB,IAApB;AACD,GAFD;;AAGF,SAAA,YAAA;AATA,CAAA,EAAA;;AAWA,IAAM,KAAK,GAAG,IAAI,YAAJ,CAAiB,QAAjB,CAAd;AACA,IAAM,OAAO,GAAG,IAAI,YAAJ,CAAiB,QAAjB,CAAhB;AAEA,KAAK,CAAC,SAAN,CAAgB,OAAhB;AAEA,UAAU,CAAC,YAAA;AACT,EAAA,KAAK,CAAC,WAAN,CAAkB,OAAlB;AACD,CAFS,EAEP,IAFO,CAAV","file":"observer.670782e5.js","sourceRoot":"..","sourcesContent":["interface Observer {\r\n  update: (data: any) => void\r\n}\r\n\r\ninterface Subject {\r\n  subscribe: (observer: Observer) => void\r\n  unsubscribe: (observer: Observer) => void\r\n}\r\n\r\nclass BitcoinPrice implements Subject {\r\n  observers: Observer[] = []\r\n\r\n  constructor(value: string) {\r\n    const el: HTMLInputElement = document.querySelector(value)\r\n    el.addEventListener('input', () => {\r\n      this.notify(el.value)\r\n    })\r\n  }\r\n\r\n  subscribe (observer: Observer) {\r\n    this.observers.push(observer)\r\n  }\r\n\r\n  unsubscribe (observer: Observer) {\r\n    const index = this.observers.findIndex(obs => {\r\n      return obs === observer\r\n    })\r\n\r\n    this.observers.splice(index, 1)\r\n  }\r\n\r\n  notify (data: any) {\r\n    this.observers.forEach(observer => observer.update(data))\r\n  }\r\n}\r\n\r\nclass PriceDisplay implements Observer {\r\n  private el: HTMLElement\r\n\r\n  constructor (price: string) {\r\n    this.el = document.querySelector(price)\r\n  }\r\n  update(data: any) {\r\n    this.el.innerText = data\r\n  }\r\n}\r\n\r\nconst value = new BitcoinPrice('#value')\r\nconst display = new PriceDisplay('#price')\r\n\r\nvalue.subscribe(display)\r\n\r\nsetTimeout(() => {\r\n  value.unsubscribe(display)\r\n}, 5000)"]}